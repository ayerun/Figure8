#!/usr/bin/env python3

import rospy
import tf2_ros as tf2
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Vector3, Quaternion
from std_msgs.msg import ColorRGBA
import time

class EEMarker:
    '''
    Class tracks arm end effector and publishes markers in rviz at its location
    Markers change size and shape depending on the sign of the x coordinate of the end effector
    
    Publishes:  visualization_msgs/Marker
    Parameters: L1 - length of link 1
                L2 - length of link 2
                T - Time to complete trajectory
    '''
    
    def __init__(self):
        '''
        constructor of EEMarker class
        initializes necessary parameters
        '''

        #import parameters
        self.L1 = rospy.get_param('L1')
        self.L2 = rospy.get_param('L2')
        self.T = rospy.get_param('T')

        #initialize publisher
        self.pub = rospy.Publisher('markers',Marker,queue_size=10)
        self.rate = 10
        self.prate = rospy.Rate(self.rate)

        #initialize listener
        self.buf = tf2.Buffer()
        self.tl = tf2.TransformListener(self.buf)
        for i in range (0,1000):
            #track end effector
            self.coords = self.tracking()
            
            #publish marker
            self.marking()
            time.sleep(5)

    def tracking(self):
        '''
        Listen for transformation from base link to end effector
        Returns:
            [tx,ty] (float list): x and y position of end effector
        '''
        found = False
        while found == False:
            try:
                trans = self.buf.lookup_transform('base_link','ee',rospy.Time())
                tx = trans.transform.translation.x
                ty = trans.transform.translation.y
                found = True
            except:
                rospy.loginfo('no transform')
        return [tx,ty]

    def marking(self):
        '''
        Publishes markers at end effector location
        Args:
            coords (float list): x and y coordinates of end effector
        '''
        tx = self.coords[0]
        ty = self.coords[1]
        marker = Marker()
        marker.header.frame_id = ('base_link')
        marker.header.stamp = rospy.Time.now()
        marker.action = marker.ADD
        marker.lifetime = rospy.Duration(3)
        marker.pose.position = Vector3(tx,ty,0)
        marker.color = ColorRGBA(1,1,0,1)
        marker.type = marker.SPHERE
        marker.scale = Vector3(0.3,0.3,0.3)
        self.pub.publish(marker)


def main():
    rospy.init_node('arm_marker') 
    em = EEMarker()


if __name__ == '__main__':
    try:
        main()
    except:
        rospy.ROSInterruptException