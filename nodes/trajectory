#!/usr/bin/env python3

import rospy
import homework2.Figure8 as f8
#import time #may need later
from geometry_msgs.msg import Twist, Vector3, PoseStamped, Pose, Point, Quaternion
from nav_msgs.msg import Path
from tf.msg import tfMessage
from tf.transformations import quaternion_from_euler

class Trajectory:
    '''
    Publishes:  geometry_msgs/Twist message to cmd_vel
                nav_msgs/Path message to rviz?
    Broadcasts: static transform from world to odom 
    Services:   pause - stop turtle motion
                resume - resume turtle motion
    Parameters: width of figure 8
                height of figure 8
                period
                ~pub_freq
    '''

    def __init__(self):
        '''
        constructor
        '''
        
        #import parameters
        self.W = rospy.get_param("/width")
        self.H = rospy.get_param("/height")
        self.T = rospy.get_param("/period")
        
        #initialize publishers
        self.pub = rospy.Publisher('cmd_vel',Twist,queue_size=10) 
        self.pub_freq = 400
        self.prate = rospy.Rate(self.pub_freq)


def turtle_twist(xdot,omega):
    '''
    converts velocity and angular velocity to geometry_msgs/Twist message
    args:       xdot - velocity
                omega - angular velocity
    reuturns:   Twist message
    '''
    return Twist(linear = Vector3(x = xdot, y = 0, z = 0),
                angular = Vector3(x = 0, y = 0, z = omega))

def convert_to_path(x,y,th):
    '''
    converts positional and angular arguments to path message
    Args:
        x (float list): x positions
        y (float list): y positions
        th (float list): yaws
    Returns:
        path (nav_msgs/Path): turtle trajectory
    '''
    q = quaternion_from_euler(0,0,th)
    pt = 

def main():
    '''
    main function to calculate and execute figure eight trajectory
    '''
    #initialize node & class
    rospy.init_node('trajectory')                               
    tr = Trajectory()

    #initialize figure8 class with imported parameters
    calc = f8.figure8([tr.W,tr.H,tr.T,tr.pub_freq])
    
    #time.sleep(1)  #might need later

    #calculate trajectory
    th0 = calc.find_th0()
    vd = calc.find_vlist()
    wd = calc.find_wlist()

    #Orient turtle
    now = rospy.get_time()
    while rospy.get_time() < now+4:
        tr.pub.publish(turtle_twist(0,th0/4))
        tr.prate.sleep()
    tr.pub.publish(turtle_twist(0,0))

    #FIGURE 8
    i = 0
    now = rospy.get_time()
    while rospy.get_time() < now+tr.T:
        tr.pub.publish(turtle_twist(vd[i],wd[i]))
        i=i+1
        tr.prate.sleep()
    tr.pub.publish(turtle_twist(0,0))

    
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except:
        rospy.ROSInterruptException