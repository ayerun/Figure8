#!/usr/bin/env python3

import rospy
import tf2_ros
import homework2.Figure8 as f8
from geometry_msgs.msg import Twist, Vector3, PoseStamped, Pose, Point, Quaternion, TransformStamped
from nav_msgs.msg import Path
from turtle_trajectories.srv import Pause
from tf_conversions import transformations

class Trajectory:
    '''
    Publishes:  geometry_msgs/Twist message to cmd_vel
                nav_msgs/Path message to rviz?
    Broadcasts: static transform from world to odom 
    Services:   pause - stop turtle motion
                resume - resume turtle motion
    Parameters: width of figure 8
                height of figure 8
                period
                ~pub_freq
    '''

    def __init__(self):
        '''
        constructor
        '''
        
        #import parameters
        self.W = rospy.get_param("trajectory/width")
        self.H = rospy.get_param("trajectory/height")
        self.T = rospy.get_param("trajectory/period")
        self.pub_freq = rospy.get_param('trajectory/pub_freq')

        #initialize attributes
        self.wd = []
        self.vd = []
        self.th0 = 0
        self.i = 0
        self.paused = False
        
        #initialize publishers
        self.pub = rospy.Publisher('cmd_vel',Twist,queue_size=10) 
        self.ppub = rospy.Publisher('/path',Path,queue_size=10,latch=True)
        self.prate = rospy.Rate(self.pub_freq)

        #initialize services
        self.pause = rospy.Service('pause',Pause,self.pause_callback)
        self.resume = rospy.Service('resume',Pause,self.resume_callback)

        #initialize broadcaster and create transform
        self.static_broadcaster = tf2_ros.StaticTransformBroadcaster()
        self.world_odom_tf = TransformStamped()
        self.world_odom_tf.header.stamp = rospy.Time.now()
        self.world_odom_tf.header.frame_id = 'world'
        self.world_odom_tf.child_frame_id = 'odom'

    def pause_callback(self,emp):
        '''
        Callback function for pause serivce
        Arg:
            emp (no type): empy variable
        Returns:
            (string): indication turtle is paused
        '''
        self.paused = True
        return('Turtle is Frozen in Time!')

    def resume_callback(self,emp):
        '''
        Callback function for resume serivce
        Arg:
            emp (no type): empy variable
        Returns:
            (string): indication turtle has resumed motion
        '''
        self.paused = False
        return('Turtle has escaped the time paradox. Turtle must continue on its quest.')


    def follow_path(self):
        '''
        Publishes velocity and angular velocity data to make turtle follow the desired path
        '''
        while self.i < len(self.vd):
            self.pub.publish(turtle_twist(self.vd[self.i],self.wd[self.i]))
            self.i=self.i+1
            #Check to see if pause service has been called
            while self.paused == True:
                self.pub.publish(turtle_twist(0,0))
            self.prate.sleep()

        #stop turtle
        self.pub.publish(turtle_twist(0,0))



def turtle_twist(xdot,omega):
    '''
    converts velocity and angular velocity to geometry_msgs/Twist message
    args:       xdot - velocity
                omega - angular velocity
    reuturns:   Twist message
    '''
    return Twist(linear = Vector3(x = xdot, y = 0, z = 0),
                angular = Vector3(x = 0, y = 0, z = omega))

def convert_to_path(x,y):
    '''
    converts positional and angular arguments to path message while publishing to path topic
    Args:
        x (float list): x positions
        y (float list): y positions
        th (float list): yaws
    Returns:
        path (nav_msgs/Path): turtle trajectory
    '''
    path = Path()
    path.poses = []
    path.header.frame_id = 'world'
    path.header.stamp = rospy.Time.now()
    for i in range(0,len(x)):
        q = Quaternion(0,0,0,1)
        pt = Point(x[i],y[i],0)
        po = Pose(pt,q)
        post = PoseStamped()
        post.pose = po
        path.poses.append(post)

    return path


def main():
    '''
    main function to calculate and execute figure eight trajectory
    '''
    #initialize node & class
    rospy.init_node('trajectory')                               
    tr = Trajectory()

    #initialize figure8 class with imported parameters
    calc = f8.figure8([tr.W,tr.H,tr.T,tr.pub_freq])

    #calculate trajectory
    tr.th0 = calc.find_th0()
    tr.vd = calc.find_vlist()
    tr.wd = calc.find_wlist()
    xlist = calc.find_xlist()
    ylist = calc.find_ylist()

    #rotate odom frame
    q = transformations.quaternion_from_euler(0,0,tr.th0)
    tr.world_odom_tf.transform.translation.x = 0
    tr.world_odom_tf.transform.translation.y = 0
    tr.world_odom_tf.transform.translation.z = 0
    tr.world_odom_tf.transform.rotation.x = q[0]
    tr.world_odom_tf.transform.rotation.y = q[1]
    tr.world_odom_tf.transform.rotation.z = q[2]
    tr.world_odom_tf.transform.rotation.w = q[3]
    tr.static_broadcaster.sendTransform(tr.world_odom_tf)


    #publish Path message to /path
    path = convert_to_path(xlist,ylist)
    tr.ppub.publish(path)

    #Orient turtle
    now = rospy.get_time()
    while rospy.get_time() < now+4:
        tr.pub.publish(turtle_twist(0,tr.th0/4))
        tr.prate.sleep()
    tr.pub.publish(turtle_twist(0,0))

    #FIGURE 8
    tr.follow_path()

    
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except:
        rospy.ROSInterruptException