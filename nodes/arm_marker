#!/usr/bin/env python3

import rospy
import tf2_ros as tf2
from visualization_msgs.msg import Marker
from geometry_msgs.msg import Vector3, Quaternion
from tf.transformations import quaternion_from_euler
from std_msgs.msg import ColorRGBA
import time

class EEMarker:
    '''
    Class tracks arm end effector and publishes markers in rviz at its location
    Markers change size and shape depending on the sign of the x coordinate of the end effector
    
    Publishes:  visualization_msgs/Marker
    Parameters: L1 - length of link 1
                L2 - length of link 2
                T - Time to complete trajectory
    '''
    
    def __init__(self):
        '''
        constructor of EEMarker class
        initializes necessary parameters
        provides functions for finding (x,y) position of end effector and publishing markers at those positions
        '''

        #import parameters
        self.L1 = rospy.get_param('L1')
        self.L2 = rospy.get_param('L2')
        self.T = rospy.get_param('T')

        #initialize publisher
        self.pub = rospy.Publisher('visualization_marker',Marker,queue_size=10)
        self.rate = 60
        self.prate = rospy.Rate(self.rate)

        #initialize listener
        self.buf = tf2.Buffer()
        self.tl = tf2.TransformListener(self.buf)

        #initialize attributes
        self.tag = 0
        self.coords = [0,0]

    def tracking(self):
        '''
        Listen for transformation from base link to end effector
        Stores x and y coordinate of end effector
        '''
        found = False
        while found == False:
            try:
                trans = self.buf.lookup_transform('base_link','ee',rospy.Time())
                tx = trans.transform.translation.x
                ty = trans.transform.translation.y
                self.coords = [tx,ty]
                found = True
            except:
                pass

    def marking(self):
        '''
        Publishes markers at end effector location
        markers change color and shape depending on x coordinate
        '''
        tx = self.coords[0]
        ty = self.coords[1]
        marker = Marker()
        marker.header.frame_id = ('base_link')
        marker.header.stamp = rospy.Time.now()
        marker.id = self.tag
        marker.lifetime = rospy.Duration(self.T/5)
        marker.pose.position = Vector3(tx,ty,0)
        q = quaternion_from_euler(0,0,0)
        marker.pose.orientation = Quaternion(q[0],q[1],q[2],q[3])
        if tx > 0:
            marker.color = ColorRGBA(1,1,0,1)
            marker.type = marker.SPHERE
        else:
            marker.color = ColorRGBA(0.1,0.5,0.3,1)
            marker.type = marker.ARROW
        marker.scale = Vector3(0.1,0.1,0.1)
        self.pub.publish(marker)


def main():
    rospy.init_node('arm_marker') 
    em = EEMarker()
    while not rospy.is_shutdown():
        em.tracking()
        em.marking()
        em.tag = em.tag+1
        em.prate.sleep()


if __name__ == '__main__':
    try:
        main()
    except:
        rospy.ROSInterruptException