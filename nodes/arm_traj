#!/usr/bin/env python3

import rospy
import tf2_ros as tf2
import numpy as np
from sensor_msgs.msg import JointState
from geometry_msgs.msg import TransformStamped
import time

class Armed:
    '''
    Class solves inverse kinematics to create a simple arm motion plan
    Publishes:   sensor_msg/JointState to joint_state
    '''

    def __init__(self):
        '''
        constructor of Armed class
        initializes necessary publishers and attributes
        '''

        #import parameters
        self.L1 = rospy.get_param('L1')
        self.L2 = rospy.get_param('L2')
        self.T = rospy.get_param('T')

        #initialize publisher
        self.pub = rospy.Publisher('joint_states',JointState,queue_size=10)
        self.rate = 200
        self.prate = rospy.Rate(self.rate)

        #attributes
        self.h = (2/3)*(self.L1+self.L2)
        self.points = self.T*self.rate                  #number of points in one period (T)
        self.tlist = np.linspace(0,self.T,self.points)  #list of times in one period (T)

        #motion planning
        self.xlist = self.xcalc()
        self.ths = self.jscalc()

        #message generation
        self.jslist = []
        self.createMessage()

        #publish messages
        self.pubbin()

    def xcalc(self):
        '''
        calculates x positions of end effector over one period (T)
        Returns:
            x (float list): x positions of end effector
        '''
        x = 0.9*np.cos((2*np.pi*self.tlist)/self.T)*np.sqrt((self.L1+self.L2)**2-self.h**2)
        return x
    
    def jscalc(self):
        '''
        Uses inverse kinematics to calculate all JointState messages in one period (T)
        inverse kinematics equations are taken from chapter 6 of Modern Robotics by Lynch, Park
        '''
        ylist = self.h*np.ones_like(self.xlist)
        gammas = np.arctan2(ylist,self.xlist)
        betas = np.arccos((self.L1**2+self.L2**2-np.square(self.xlist)-self.h**2)/(2*self.L1*self.L2))
        alphas = np.arccos((np.square(self.xlist)+self.h**2+self.L1**2-self.L2**2)/(2*self.L1*np.sqrt(np.square(self.xlist)+self.h**2)))
        th1 = gammas-alphas
        th2 = np.pi-betas
        th3 = 10*np.ones_like(th2)
        return [th1,th2,th3]

    def createMessage(self):
        '''
        Creates a list of JointState messages 
        '''
        for i in range(0,len(self.ths[0])):
            js = JointState()
            js.name = ['base_joint','L1_joint','ee_joint']
            js.position = [self.ths[0][i],self.ths[1][i],self.ths[2][i]]
            self.jslist.append(js)
        return None

    def pubbin(self):
        '''
        Parses list of JointState messages
        Adds timestamp
        Publishes messages
        '''
        i = 0
        while not rospy.is_shutdown():
            self.jslist[i].header.stamp = rospy.Time.now()  #timestamp for the publisher
            self.pub.publish(self.jslist[i])
            i = i+1
            if i == self.points:
                i = 0
            self.prate.sleep()



def main():
    rospy.init_node('arm_traj')  
    arm = Armed()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except:
        rospy.ROSInterruptException